# 재귀함수 팩토리얼 

def fact(n):

    if n <= 1 : 
        return 1
    
    return n * fact(n-1)

# DFS: 깊이 우선 탐색
# 인접 행렬 : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
# 인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식

# 1. 입접 행렬 방식 
# -  2차원 리스트로 구현 할 수 있음. 
INF = 99999999 # 무한의 비용 선언

graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

# 2. 인접 리스트 방식
# -  인접 리스트를 이용해 그래프를 표현하고자 할 때에도 단순히 2차원 리스트를 이용하면 된다는 점.

graph = [[] for _ in range(3)]

graph[0].append((1,7))
graph[0].append((2,5))

graph[1].append((0.7)) # 뭐 이런식?

# 그러면 두 방식에 차이점은 무엇일까?

# 메모리 측면 : 인접 행렬 방식은 모든 관계에 대해 저장하므로 노드 개수가 많으면 많을 수록, 메모리가 불 필요하게 낭비된다. 
# 속도 측면 : 인접 리스트 방식은 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.